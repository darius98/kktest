#ifndef KTEST_KTEST_H_
#define KTEST_KTEST_H_

#include "matcher/core_matchers.hpp"

#include "testing/definer.hpp"
#include "testing/expect.hpp"
#include "testing/testing.hpp"

// TODO(darius98): Trim the file to project-level instead.
#define __FILENAME__ (__builtin_strrchr(__FILE__, '/') ?                       \
                      __builtin_strrchr(__FILE__, '/') + 1 :                   \
                      __FILE__)

/**
 * Create a test.
 *
 * Syntax: void test(std::string description, std::function<void()> testFunc);
 *
 * Example usage:
 * ```
 * test("!!1 == true", [&]() {
 *   expect(!!1);
 *   expectMatches(!!1, isTrue);
 * });
 * ```
 */
#define test ktest::__internal::TestDefiner(__FILENAME__, __LINE__)

/**
 * Create a test group.
 *
 * Syntax: void group(std::string description, std::function<void()> groupFunc);
 *
 * Example usage:
 * ```
 * group("!!(non-zero integers) == true", [&]() {
 *   test("!!1 == true", [&]() {
 *     expect(!!1);
 *     expectMatches(!!1, isTrue);
 *   }
 *
 *   test("!!2 == true", [&]() {
 *     expect(!!2);
 *     expectMatches(!!2, isTrue);
 *   }
 *
 *   for (int i = 100; i <= 200; ++ i) {
 *     test("!!" + std::to_string(i) + " == true", [&]() {
 *       expect(!!i);
 *       expectMatches(!!i, isTrue);
 *     });
 *   }
 * });
 * ```
 */
#define group ktest::__internal::GroupDefiner(__FILENAME__, __LINE__)

#define setUp ktest::__internal::SetUpDefiner(__FILENAME__, __LINE__)

#define tearDown ktest::__internal::TearDownDefiner(__FILENAME__, __LINE__)

/**
 * Assertion macro.
 *
 * Use this to verify a boolean condition is satisfied. Fails the test, printing
 * the body of the boolean expression when it evaluates to false.
 */
#define expect(expr...)                                                        \
    ktest::__expect(expr, __FILENAME__, __LINE__, #expr " is false")

/**
 * Matcher expectation macro.
 *
 * Use this to verify an object matches a certain matcher.
 *
 * The syntax is `expectMatches(object, matcher)`.
 */
#define expectMatches(var_comma_matcher...)                                    \
    ktest::__expectMatches(var_comma_matcher, __FILENAME__, __LINE__)


/**
 * Macro for forcing a test to fail. `expect` and `expectMatches` are
 * preferred where possible.
 *
 * Has the same effect as __expect(false, file, line, message).
 */
#define fail(...) \
    ktest::__expect(false, __FILENAME__, __LINE__, __VA_ARGS__)

#endif
