#define VERSION "1.0.0"

#include <iostream>

#include <kktest_impl/main.hpp>
#include <kktest_impl/signature.hpp>

#include <kktest_ext/feedback.hpp>

using kktest::Extension;
using kktest::InternalArgs;
using kktest::registerInternalFlags;
using kktest::kkTestSignature;
using kktest::kkTestSigSize;
using cppli::Cppli;
using cppli::FlagSpec;
using std::cout;
using std::vector;

int main(int argc, char** argv) {
    vector<Extension*> extensions;
    Cppli cppli("Test binary. Generated by The KKTest Framework.");
    cppli.addTerminalFlag(FlagSpec("help")
                          .setShortName("h")
                          .setDescription("Display this help menu."),
                          [&]() {
        cout << cppli.renderHelp();
    });
    cppli.addTerminalFlag(FlagSpec("version")
                          .setShortName("v")
                          .setDescription("Display program version."),
                          [&]() {
        cout << "KKTest generated test-case.\n";
        cout << "KKTest version: " << VERSION << "\n";
    });
    cppli.addTerminalFlag(FlagSpec("get-signature")
                          .setDescription("Display the KKTest 32-byte "
                                          "signature in hexadecimal format"),
                          [&]() {
        for (int i = 0; i < kkTestSigSize; ++i) {
            cout << "0123456789ABCDEF"[kkTestSignature[i] >> 4u]
                 << "0123456789ABCDEF"[kkTestSignature[i] & 15u];
        }
        cout << "\n";
    });
    InternalArgs internalArgs = registerInternalFlags(&cppli);

kktest::feedback::FeedbackExtension feedbackExtension;
feedbackExtension.registerCommandLineArgs(&cppli);
extensions.push_back(&feedbackExtension);

    cppli.interpret(argc, argv);
    int ret = kktest::main(extensions, internalArgs);
    return ret;
}
