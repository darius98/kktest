#include "kktest/core/src/main.hpp"

#include "kktest/core/src/driver.hpp"
#include "kktest/core/src/extension_api.hpp"

using namespace cppli;
using namespace std;

namespace kktest {

void initialize(int argc, char** argv, vector<Extension*>* extensions) {
    Parser parser("Test binary. Generated by The KKTest Framework.");

    parser.addHelpFlag();
    parser.addTerminalFlag(
            FlagSpec("version")
                    .setShortName("v")
                    .setDescription("Display program version."),
            "KKTest generated test-case.\nKKTest version: " KKTEST_VERSION"\n");
    auto executorTypeArgument = parser.addChoiceArgument(
            ChoiceArgumentSpec<ExecutorType>("executor")
                .setDescription("Choose the type of executor to use. A smooth "
                                "executor runs all tests in the same process, "
                                "while a boxed executor runs each test in a "
                                "separate process. Using a smooth executor "
                                "means a test killed by signal will not be "
                                "detected and will kill the whole test suite.")
                .setOptions({
                    {"smooth", SMOOTH_EXECUTOR},
                    {"boxed", BOXED_EXECUTOR}
                })
                .setDefaultValue(BOXED_EXECUTOR));
    auto maxParallelTestsArgument = parser.addNumericArgument(
            NumericArgumentSpec<size_t>("max-parallel-tests")
                .setDescription("Maximum number of tests to execute in parallel"
                                " (processes to spawn). Ignored if `smooth` "
                                "flag is enabled.")
                .setDefaultValue(1u)
                .setImplicitValue(1u));

    for (Extension* extension : *extensions) {
        extension->registerCommandLineArgs(parser);
    }

    parser.interpret(argc, argv);

    ExtensionApi api;
    for (Extension* extension : *extensions) {
        extension->init(api);
    }

    size_t numBoxes = max(maxParallelTestsArgument.get(), 1ul);

    Driver::Init(api, executorTypeArgument.get(), numBoxes);
}

int runTests(vector<TestCase> tests, vector<Extension*>* extensions) {
    auto driver = Driver::Instance();

    int ret = 1;
    try {
        for (TestCase& testCase : tests) {
            driver->beforeTestCase(testCase.name);
            testCase.run();
            driver->afterTestCase();
        }
        ret = driver->clean();
    } catch(const ConfigurationError& error) {
        driver->forceDestroy(error);
    } catch(const ExpectationFailed& error) {
        driver->forceDestroy(ConfigurationError(
                string("Expectation failed in global scope: ") + error.what()));
    } catch(const exception& error) {
        driver->forceDestroy(ConfigurationError(
                string("Exception thrown in global scope: ") + error.what()));
    } catch(...) {
        driver->forceDestroy(ConfigurationError(
                "Non-exception object thrown in global scope."));
    }

    for (Extension* extension : *extensions) {
        extension->destroy();
        delete extension;
    }

    delete driver;

    return ret;
}

}
